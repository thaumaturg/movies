@using Movies.Blazor.Models
@using Movies.Blazor.Services
@inject IMovieService MovieService
@inject IJSRuntime JSRuntime

<div class="max-w-6xl mx-auto p-6">
    <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
        <h1 class="text-3xl font-bold text-gray-800 mb-6 text-center">Movie Search</h1>

        <div class="flex flex-col md:flex-row gap-4 mb-4">
            <div class="flex-1">
                <input @bind="searchTerm" @onkeypress="OnKeyPress"
                       class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none text-lg"
                       placeholder="Enter movie title..." />
            </div>
            <button @onclick="SearchMovies" disabled="@isLoading"
                    class="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed font-semibold transition-colors">
                @if (isLoading)
                {
                    <span class="flex items-center">
                        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Searching...
                    </span>
                }
                else
                {
                    <span>Search</span>
                }
            </button>
        </div>

        @if (searchHistory != null && searchHistory.Any())
        {
            <div class="mb-4">
                <h3 class="text-sm font-medium text-gray-700 mb-2">Recent Searches:</h3>
                <div class="flex flex-wrap gap-2">
                    @foreach (var search in searchHistory)
                    {
                        <button @onclick="() => SearchFromHistory(search.Title)"
                                class="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm hover:bg-gray-200 transition-colors">
                            @search.Title
                        </button>
                    }
                </div>
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
            @errorMessage
        </div>
    }

    @if (searchResults != null && searchResults.Any())
    {
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-2xl font-bold text-gray-800 mb-6">Search Results (@searchResults.Count movies found)</h2>

            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                @foreach (var movie in searchResults)
                {
                    <div class="bg-gray-50 rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow cursor-pointer"
                         @onclick="() => ShowMovieDetails(movie.ImdbId)">
                        <div class="aspect-w-2 aspect-h-3 bg-gray-200">
                            @if (!string.IsNullOrEmpty(movie.Poster) && movie.Poster != "N/A")
                            {
                                <img src="@movie.Poster" alt="@movie.Title"
                                     class="w-full h-80 object-cover"
                                     loading="lazy" />
                            }
                            else
                            {
                                <div class="w-full h-80 bg-gray-300 flex items-center justify-center">
                                    <span class="text-gray-500">No Image</span>
                                </div>
                            }
                        </div>
                        <div class="p-4">
                            <h3 class="font-semibold text-lg text-gray-800 mb-1 line-clamp-2">@movie.Title</h3>
                            <p class="text-gray-600 text-sm">@movie.Year</p>
                            <p class="text-gray-500 text-xs mt-1 capitalize">@movie.Type</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else if (hasSearched && !isLoading)
    {
        <div class="bg-gray-100 rounded-lg p-8 text-center">
            <p class="text-gray-600 text-lg">No movies found. Try a different search term.</p>
        </div>
    }
</div>

@if (selectedMovie != null && showModal)
{
    <MovieDetailModal Movie="selectedMovie" OnClose="CloseModal" />
}

@code {
    private string searchTerm = string.Empty;
    private List<MovieDto> searchResults = new();
    private List<MovieSearchDto> searchHistory = new();
    private MovieDetailDto? selectedMovie;
    private bool isLoading = false;
    private bool hasSearched = false;
    private bool showModal = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadSearchHistory();
    }

    private async Task LoadSearchHistory()
    {
        var history = await MovieService.GetSearchHistoryAsync();
        if (history != null)
        {
            searchHistory = history;
        }
    }

    private async Task SearchMovies()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return;

        isLoading = true;
        hasSearched = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await MovieService.SearchMoviesAsync(searchTerm.Trim());

            if (result != null)
            {
                if (result.Response == "True")
                {
                    searchResults = result.Search;
                }
                else
                {
                    searchResults = new List<MovieDto>();
                    errorMessage = result.Error ?? "No movies found";
                }
            }
            else
            {
                searchResults = new List<MovieDto>();
                errorMessage = "An error occurred while searching for movies";
            }

            await LoadSearchHistory();
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while searching for movies";
            searchResults = new List<MovieDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchFromHistory(string title)
    {
        searchTerm = title;
        await SearchMovies();
    }

    private async Task ShowMovieDetails(string imdbId)
    {
        try
        {
            var movieDetail = await MovieService.GetMovieDetailsAsync(imdbId);
            if (movieDetail != null && movieDetail.Response == "True")
            {
                selectedMovie = movieDetail;
                showModal = true;
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            // Handle error silently or show a toast
        }
    }

    private void CloseModal()
    {
        showModal = false;
        selectedMovie = null;
        StateHasChanged();
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchMovies();
        }
    }
}
